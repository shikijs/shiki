{
  "version": 1,
  "fileHash": "882481ce23da71b0cb2d2d339928fd48ec9fd0b723c25d518cfc2f0c7edd22c0",
  "cache": {
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:ca8651b5668ab58c40bbdc9c72976f4e7b6ad88d34f28a0ff8ed8d104b613cfd": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) function Shiki(options: MarkdownItShikiOptions): Promise<(markdownit: MarkdownIt) => void>\nimport Shiki",
          "start": 7,
          "length": 5,
          "target": "Shiki",
          "line": 0,
          "character": 7
        },
        {
          "type": "hover",
          "text": "(alias) interface MarkdownIt\n(alias) const MarkdownIt: MarkdownItConstructor\nimport MarkdownIt",
          "docs": "Main parser/renderer class.\n\n##### Usage\n\n```javascript\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'),\n    md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n\n// browser without AMD, added to \"window\" on script load\n// Note, there are no dash.\nvar md = window.markdownit();\nvar result = md.render('# markdown-it rulezz!');\n```\n\nSingle line rendering, without paragraph wrap:\n\n```javascript\nvar md = require('markdown-it')();\nvar result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n##### Example\n\n```javascript\n// commonmark mode\nvar md = require('markdown-it')('commonmark');\n\n// default mode\nvar md = require('markdown-it')();\n\n// enable everything\nvar md = require('markdown-it')({\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n##### Syntax highlighting\n\n```js\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str, true).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nOr with full wrapper override (if you need assign class to `<pre>`):\n\n```javascript\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(lang, str, true).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```",
          "start": 48,
          "length": 10,
          "target": "MarkdownIt",
          "line": 1,
          "character": 7
        },
        {
          "type": "hover",
          "text": "const md: MarkdownIt",
          "start": 85,
          "length": 2,
          "target": "md",
          "line": 3,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) MarkdownIt(): MarkdownIt (+2 overloads)\nimport MarkdownIt",
          "docs": "Main parser/renderer class.\n\n##### Usage\n\n```javascript\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'),\n    md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n\n// browser without AMD, added to \"window\" on script load\n// Note, there are no dash.\nvar md = window.markdownit();\nvar result = md.render('# markdown-it rulezz!');\n```\n\nSingle line rendering, without paragraph wrap:\n\n```javascript\nvar md = require('markdown-it')();\nvar result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n##### Example\n\n```javascript\n// commonmark mode\nvar md = require('markdown-it')('commonmark');\n\n// default mode\nvar md = require('markdown-it')();\n\n// enable everything\nvar md = require('markdown-it')({\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n##### Syntax highlighting\n\n```js\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str, true).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nOr with full wrapper override (if you need assign class to `<pre>`):\n\n```javascript\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(lang, str, true).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```",
          "start": 90,
          "length": 10,
          "target": "MarkdownIt",
          "line": 3,
          "character": 11
        },
        {
          "type": "hover",
          "text": "const md: MarkdownIt",
          "start": 104,
          "length": 2,
          "target": "md",
          "line": 5,
          "character": 0
        },
        {
          "type": "hover",
          "text": "(method) MarkdownIt.use(plugin: PluginSimple): MarkdownIt (+2 overloads)",
          "docs": "*chainable*\n\nLoad specified plugin with given params into current parser instance.\nIt's just a sugar to call `plugin(md, params)` with curring.\n\n##### Example\n\n```javascript\nvar iterator = require('markdown-it-for-inline');\nvar md = require('markdown-it')()\n            .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n              tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n            });\n```",
          "start": 107,
          "length": 3,
          "target": "use",
          "line": 5,
          "character": 3
        },
        {
          "type": "hover",
          "text": "(alias) Shiki(options: MarkdownItShikiOptions): Promise<(markdownit: MarkdownIt) => void>\nimport Shiki",
          "start": 117,
          "length": 5,
          "target": "Shiki",
          "line": 5,
          "character": 13
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsMultipleThemes<BundledTheme>.themes: Partial<Record<string, ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>>>",
          "docs": "A map of color names to themes.\nThis allows you to specify multiple themes for the generated code.\n\n```ts\nhighlighter.codeToHtml(code, {\n  lang: 'js',\n  themes: {\n    light: 'vitesse-light',\n    dark: 'vitesse-dark',\n  }\n})\n```\n\nWill generate:\n\n```html\n<span style=\"color:#111;--shiki-dark:#fff;\">code</span>\n```",
          "tags": [
            [
              "see",
              "https://github.com/shikijs/shiki#lightdark-dual-themes"
            ]
          ],
          "start": 127,
          "length": 6,
          "target": "themes",
          "line": 6,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) light: \"vitesse-light\"",
          "start": 141,
          "length": 5,
          "target": "light",
          "line": 7,
          "character": 4
        },
        {
          "type": "hover",
          "text": "(property) dark: \"vitesse-dark\"",
          "start": 169,
          "length": 4,
          "target": "dark",
          "line": 8,
          "character": 4
        }
      ],
      "code": "import Shiki from '@shikijs/markdown-it'\nimport MarkdownIt from 'markdown-it'\n\nconst md = MarkdownIt()\n\nmd.use(await Shiki({\n  themes: {\n    light: 'vitesse-light',\n    dark: 'vitesse-dark',\n  }\n}))",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:0289aa0b42bcb888b78c8acf39a060f6b7283180fe978981810df19bb4fe58e8": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) function fromHighlighter(highlighter: HighlighterGeneric<any, any>, options: MarkdownItShikiSetupOptions): (markdownit: MarkdownIt) => void\nimport fromHighlighter",
          "start": 9,
          "length": 15,
          "target": "fromHighlighter",
          "line": 0,
          "character": 9
        },
        {
          "type": "hover",
          "text": "(alias) interface MarkdownIt\n(alias) const MarkdownIt: MarkdownItConstructor\nimport MarkdownIt",
          "docs": "Main parser/renderer class.\n\n##### Usage\n\n```javascript\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'),\n    md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n\n// browser without AMD, added to \"window\" on script load\n// Note, there are no dash.\nvar md = window.markdownit();\nvar result = md.render('# markdown-it rulezz!');\n```\n\nSingle line rendering, without paragraph wrap:\n\n```javascript\nvar md = require('markdown-it')();\nvar result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n##### Example\n\n```javascript\n// commonmark mode\nvar md = require('markdown-it')('commonmark');\n\n// default mode\nvar md = require('markdown-it')();\n\n// enable everything\nvar md = require('markdown-it')({\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n##### Syntax highlighting\n\n```js\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str, true).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nOr with full wrapper override (if you need assign class to `<pre>`):\n\n```javascript\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(lang, str, true).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```",
          "start": 67,
          "length": 10,
          "target": "MarkdownIt",
          "line": 1,
          "character": 7
        },
        {
          "type": "hover",
          "text": "(alias) function createHighlighterCore(options: HighlighterCoreOptions<false>): Promise<HighlighterCore>\nimport createHighlighterCore",
          "docs": "Create a Shiki core highlighter instance, with no languages or themes bundled.\nWasm and each language and theme must be loaded manually.",
          "tags": [
            [
              "see",
              "http://shiki.style/guide/bundles#fine-grained-bundle"
            ]
          ],
          "start": 106,
          "length": 21,
          "target": "createHighlighterCore",
          "line": 2,
          "character": 9
        },
        {
          "type": "hover",
          "text": "(alias) function createOnigurumaEngine(options?: LoadWasmOptions | null): Promise<RegexEngine>\nimport createOnigurumaEngine",
          "start": 157,
          "length": 21,
          "target": "createOnigurumaEngine",
          "line": 3,
          "character": 9
        },
        {
          "type": "hover",
          "text": "const highlighter: HighlighterCore",
          "start": 218,
          "length": 11,
          "target": "highlighter",
          "line": 5,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) createHighlighterCore(options: HighlighterCoreOptions<false>): Promise<HighlighterCore>\nimport createHighlighterCore",
          "docs": "Create a Shiki core highlighter instance, with no languages or themes bundled.\nWasm and each language and theme must be loaded manually.",
          "tags": [
            [
              "see",
              "http://shiki.style/guide/bundles#fine-grained-bundle"
            ]
          ],
          "start": 238,
          "length": 21,
          "target": "createHighlighterCore",
          "line": 5,
          "character": 26
        },
        {
          "type": "hover",
          "text": "(property) HighlighterCoreOptions<false>.themes?: ThemeInput[] | undefined",
          "docs": "Theme names, or theme registration objects to be loaded upfront.",
          "start": 264,
          "length": 6,
          "target": "themes",
          "line": 6,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) HighlighterCoreOptions<false>.langs?: LanguageInput[] | undefined",
          "docs": "Language names, or language registration objects to be loaded upfront.",
          "start": 325,
          "length": 5,
          "target": "langs",
          "line": 9,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) HighlighterCoreOptions<false>.engine: Awaitable<RegexEngine>",
          "docs": "Custom RegExp engine.",
          "start": 382,
          "length": 6,
          "target": "engine",
          "line": 12,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(alias) createOnigurumaEngine(options?: LoadWasmOptions | null): Promise<RegexEngine>\nimport createOnigurumaEngine",
          "start": 390,
          "length": 21,
          "target": "createOnigurumaEngine",
          "line": 12,
          "character": 10
        },
        {
          "type": "hover",
          "text": "const md: MarkdownIt",
          "start": 450,
          "length": 2,
          "target": "md",
          "line": 15,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) MarkdownIt(): MarkdownIt (+2 overloads)\nimport MarkdownIt",
          "docs": "Main parser/renderer class.\n\n##### Usage\n\n```javascript\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'),\n    md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n\n// browser without AMD, added to \"window\" on script load\n// Note, there are no dash.\nvar md = window.markdownit();\nvar result = md.render('# markdown-it rulezz!');\n```\n\nSingle line rendering, without paragraph wrap:\n\n```javascript\nvar md = require('markdown-it')();\nvar result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n##### Example\n\n```javascript\n// commonmark mode\nvar md = require('markdown-it')('commonmark');\n\n// default mode\nvar md = require('markdown-it')();\n\n// enable everything\nvar md = require('markdown-it')({\n  html: true,\n  linkify: true,\n  typographer: true\n});\n```\n\n##### Syntax highlighting\n\n```js\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str, true).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nOr with full wrapper override (if you need assign class to `<pre>`):\n\n```javascript\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre class=\"hljs\"><code>' +\n               hljs.highlight(lang, str, true).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```",
          "start": 455,
          "length": 10,
          "target": "MarkdownIt",
          "line": 15,
          "character": 11
        },
        {
          "type": "hover",
          "text": "const md: MarkdownIt",
          "start": 469,
          "length": 2,
          "target": "md",
          "line": 17,
          "character": 0
        },
        {
          "type": "hover",
          "text": "(method) MarkdownIt.use(plugin: PluginSimple): MarkdownIt (+2 overloads)",
          "docs": "*chainable*\n\nLoad specified plugin with given params into current parser instance.\nIt's just a sugar to call `plugin(md, params)` with curring.\n\n##### Example\n\n```javascript\nvar iterator = require('markdown-it-for-inline');\nvar md = require('markdown-it')()\n            .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n              tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n            });\n```",
          "start": 472,
          "length": 3,
          "target": "use",
          "line": 17,
          "character": 3
        },
        {
          "type": "hover",
          "text": "(alias) fromHighlighter(highlighter: HighlighterGeneric<any, any>, options: MarkdownItShikiSetupOptions): (markdownit: MarkdownIt) => void\nimport fromHighlighter",
          "start": 476,
          "length": 15,
          "target": "fromHighlighter",
          "line": 17,
          "character": 7
        },
        {
          "type": "hover",
          "text": "const highlighter: HighlighterCore",
          "start": 492,
          "length": 11,
          "target": "highlighter",
          "line": 17,
          "character": 23
        }
      ],
      "code": "import { fromHighlighter } from '@shikijs/markdown-it/core'\nimport MarkdownIt from 'markdown-it'\nimport { createHighlighterCore } from 'shiki/core'\nimport { createOnigurumaEngine } from 'shiki/engine/oniguruma'\n\nconst highlighter = await createHighlighterCore({\n  themes: [\n    import('@shikijs/themes/vitesse-light')\n  ],\n  langs: [\n    import('@shikijs/langs/javascript'),\n  ],\n  engine: createOnigurumaEngine(() => import('shiki/wasm'))\n})\n\nconst md = MarkdownIt()\n\nmd.use(fromHighlighter(highlighter, { /* options */ }))",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:e85f1224f60dde1113b22a1be5b3ef467183c3a529c5437efe03a069c3f632fe": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) function fromAsyncCodeToHtml(codeToHtml: (code: string, options: CodeToHastOptions<any, any>) => Promise<string>, options: MarkdownItShikiSetupOptions): (markdownit: MarkdownItAsync) => Promise<void>\nimport fromAsyncCodeToHtml",
          "docs": "Create a markdown-it-async plugin from a codeToHtml function.\n\nThis plugin requires to be installed against a markdown-it-async instance.",
          "start": 9,
          "length": 19,
          "target": "fromAsyncCodeToHtml",
          "line": 0,
          "character": 9
        },
        {
          "type": "hover",
          "text": "(alias) function MarkdownItAsync(presetName: PresetName, options?: MarkdownItAsyncOptions): MarkdownItAsync (+1 overload)\nimport MarkdownItAsync",
          "start": 72,
          "length": 15,
          "target": "MarkdownItAsync",
          "line": 1,
          "character": 7
        },
        {
          "type": "hover",
          "text": "(alias) const codeToHtml: (code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>) => Promise<string>\nimport codeToHtml",
          "start": 122,
          "length": 10,
          "target": "codeToHtml",
          "line": 2,
          "character": 9
        },
        {
          "type": "hover",
          "text": "const md: MarkdownItAsync",
          "start": 247,
          "length": 2,
          "target": "md",
          "line": 5,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) MarkdownItAsync(options?: MarkdownItAsyncOptions): MarkdownItAsync (+1 overload)\nimport MarkdownItAsync",
          "start": 252,
          "length": 15,
          "target": "MarkdownItAsync",
          "line": 5,
          "character": 11
        },
        {
          "type": "hover",
          "text": "const md: MarkdownItAsync",
          "start": 271,
          "length": 2,
          "target": "md",
          "line": 7,
          "character": 0
        },
        {
          "type": "hover",
          "text": "(method) MarkdownItAsync.use(plugin: PluginSimple): MarkdownItAsync (+5 overloads)",
          "docs": "*chainable*\n\nLoad specified plugin with given params into current parser instance.\nIt's just a sugar to call `plugin(md, params)` with curring.\n\n##### Example\n\n```javascript\nvar iterator = require('markdown-it-for-inline');\nvar md = require('markdown-it')()\n            .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n              tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n            });\n```",
          "start": 274,
          "length": 3,
          "target": "use",
          "line": 7,
          "character": 3
        },
        {
          "type": "hover",
          "text": "(alias) fromAsyncCodeToHtml(codeToHtml: (code: string, options: CodeToHastOptions<any, any>) => Promise<string>, options: MarkdownItShikiSetupOptions): (markdownit: MarkdownItAsync) => Promise<void>\nimport fromAsyncCodeToHtml",
          "docs": "Create a markdown-it-async plugin from a codeToHtml function.\n\nThis plugin requires to be installed against a markdown-it-async instance.",
          "start": 281,
          "length": 19,
          "target": "fromAsyncCodeToHtml",
          "line": 8,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(alias) const codeToHtml: (code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>) => Promise<string>\nimport codeToHtml",
          "start": 342,
          "length": 10,
          "target": "codeToHtml",
          "line": 10,
          "character": 4
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsMultipleThemes<BundledTheme>.themes: Partial<Record<string, ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>>>",
          "docs": "A map of color names to themes.\nThis allows you to specify multiple themes for the generated code.\n\n```ts\nhighlighter.codeToHtml(code, {\n  lang: 'js',\n  themes: {\n    light: 'vitesse-light',\n    dark: 'vitesse-dark',\n  }\n})\n```\n\nWill generate:\n\n```html\n<span style=\"color:#111;--shiki-dark:#fff;\">code</span>\n```",
          "tags": [
            [
              "see",
              "https://github.com/shikijs/shiki#lightdark-dual-themes"
            ]
          ],
          "start": 366,
          "length": 6,
          "target": "themes",
          "line": 12,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) light: \"vitesse-light\"",
          "start": 384,
          "length": 5,
          "target": "light",
          "line": 13,
          "character": 8
        },
        {
          "type": "hover",
          "text": "(property) dark: \"vitesse-dark\"",
          "start": 416,
          "length": 4,
          "target": "dark",
          "line": 14,
          "character": 8
        },
        {
          "type": "hover",
          "text": "const html: string",
          "start": 512,
          "length": 4,
          "target": "html",
          "line": 21,
          "character": 6
        },
        {
          "type": "hover",
          "text": "const md: MarkdownItAsync",
          "start": 525,
          "length": 2,
          "target": "md",
          "line": 21,
          "character": 19
        },
        {
          "type": "hover",
          "text": "(method) MarkdownItAsync.renderAsync(src: string, env?: any): Promise<string>",
          "start": 528,
          "length": 11,
          "target": "renderAsync",
          "line": 21,
          "character": 22
        }
      ],
      "code": "import { fromAsyncCodeToHtml } from '@shikijs/markdown-it/async'\nimport MarkdownItAsync from 'markdown-it-async'\nimport { codeToHtml } from 'shiki' // Or your custom shorthand bundle\n\n// Initialize MarkdownIt instance with markdown-it-async\nconst md = MarkdownItAsync()\n\nmd.use(\n  fromAsyncCodeToHtml(\n    // Pass the codeToHtml function\n    codeToHtml,\n    {\n      themes: {\n        light: 'vitesse-light',\n        dark: 'vitesse-dark',\n      }\n    }\n  )\n)\n\n// Use `md.renderAsync` instead of `md.render`\nconst html = await md.renderAsync('# Title\\n```ts\\nconsole.log(\"Hello, World!\")\\n```')",
      "meta": {
        "extension": "ts"
      }
    }
  }
}