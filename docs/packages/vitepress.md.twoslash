{
  "version": 1,
  "fileHash": "5d9494dd190f604ac8057c38a8e6eccfb414cf52795c8ee266f2734ac2db4543",
  "cache": {
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:ac024f9586cb42dcab70f35c497307efb96ea835a3976bf68649e05b1d2eda19": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) interface EnhanceAppContext\nimport EnhanceAppContext",
          "start": 14,
          "length": 17,
          "target": "EnhanceAppContext",
          "line": 0,
          "character": 14
        },
        {
          "type": "hover",
          "text": "(alias) const TwoslashFloatingVue: {\n    install: (app: App, options?: FloatingVueConfig) => void;\n}\nimport TwoslashFloatingVue",
          "docs": "Vue plugin to install FloatingVue with styles.\n\nImport this function in `.vitepress/theme/index.ts` and use `app.use(TwoslashFloatingVue)` inside the `enhanceApp` hook.",
          "start": 58,
          "length": 19,
          "target": "TwoslashFloatingVue",
          "line": 1,
          "character": 7
        },
        {
          "type": "hover",
          "text": "(alias) const Theme: {\n    Layout: DefineComponent;\n    enhanceApp: (ctx: EnhanceAppContext) => void;\n}\nimport Theme",
          "start": 141,
          "length": 5,
          "target": "Theme",
          "line": 2,
          "character": 7
        },
        {
          "type": "hover",
          "text": "(property) extends: {\n    Layout: DefineComponent;\n    enhanceApp: (ctx: EnhanceAppContext) => void;\n}",
          "start": 252,
          "length": 7,
          "target": "extends",
          "line": 7,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(alias) const Theme: {\n    Layout: DefineComponent;\n    enhanceApp: (ctx: EnhanceAppContext) => void;\n}\nimport Theme",
          "start": 261,
          "length": 5,
          "target": "Theme",
          "line": 7,
          "character": 11
        },
        {
          "type": "hover",
          "text": "(method) enhanceApp({ app }: EnhanceAppContext): void",
          "start": 270,
          "length": 10,
          "target": "enhanceApp",
          "line": 8,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(parameter) app: App<any>",
          "start": 283,
          "length": 3,
          "target": "app",
          "line": 8,
          "character": 15
        },
        {
          "type": "hover",
          "text": "(alias) interface EnhanceAppContext\nimport EnhanceAppContext",
          "start": 290,
          "length": 17,
          "target": "EnhanceAppContext",
          "line": 8,
          "character": 22
        },
        {
          "type": "hover",
          "text": "(parameter) app: App<any>",
          "start": 315,
          "length": 3,
          "target": "app",
          "line": 9,
          "character": 4
        },
        {
          "type": "hover",
          "text": "(method) App<any>.use<[options?: any]>(plugin: Plugin<[options?: any], [options?: any]>, ...options: NoInfer<[options?: any]>): App<any> (+1 overload)",
          "start": 319,
          "length": 3,
          "target": "use",
          "line": 9,
          "character": 8
        },
        {
          "type": "hover",
          "text": "(alias) const TwoslashFloatingVue: {\n    install: (app: App, options?: FloatingVueConfig) => void;\n}\nimport TwoslashFloatingVue",
          "docs": "Vue plugin to install FloatingVue with styles.\n\nImport this function in `.vitepress/theme/index.ts` and use `app.use(TwoslashFloatingVue)` inside the `enhanceApp` hook.",
          "start": 323,
          "length": 19,
          "target": "TwoslashFloatingVue",
          "line": 9,
          "character": 12
        }
      ],
      "code": "import type { EnhanceAppContext } from 'vitepress'\nimport TwoslashFloatingVue from '@shikijs/vitepress-twoslash/client' // [!code hl]\nimport Theme from 'vitepress/theme'\n\nimport '@shikijs/vitepress-twoslash/style.css' // [!code hl]\n\nexport default {\n  extends: Theme,\n  enhanceApp({ app }: EnhanceAppContext) {\n    app.use(TwoslashFloatingVue) // [!code hl]\n  },\n}",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:f26af2cd1fdca74f2491d980ba702449e56405ef739e75a8b054f543c5118340": {
      "nodes": [
        {
          "type": "hover",
          "text": "namespace console\nvar console: Console",
          "docs": "The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```",
          "tags": [
            [
              "see",
              "[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"
            ]
          ],
          "start": 0,
          "length": 7,
          "target": "console",
          "line": 0,
          "character": 0
        },
        {
          "type": "hover",
          "text": "(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)",
          "docs": "Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.",
          "tags": [
            [
              "since",
              "v0.1.100"
            ]
          ],
          "start": 8,
          "length": 3,
          "target": "log",
          "line": 0,
          "character": 8
        },
        {
          "type": "query",
          "text": "(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)",
          "docs": "Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.",
          "tags": [
            [
              "since",
              "v0.1.100"
            ]
          ],
          "start": 8,
          "length": 3,
          "target": "log",
          "line": 0,
          "character": 8
        }
      ],
      "code": "console.log('hello')\n",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:vue:c16eb29950c93c2ed13c671fc51ffdb8e7811164ea794256ad7293700f9f8003": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) const onMounted: CreateHook<any>\nimport onMounted",
          "start": 24,
          "length": 9,
          "target": "onMounted",
          "line": 1,
          "character": 9
        },
        {
          "type": "hover",
          "text": "(alias) function ref<T>(value: T): [T] extends [Ref] ? IfAny<T, Ref<T>, T> : Ref<UnwrapRef<T>, UnwrapRef<T> | T> (+1 overload)\nimport ref",
          "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
          "tags": [
            [
              "param",
              "value - The object to wrap in the ref."
            ],
            [
              "see",
              "{@link https://vuejs.org/api/reactivity-core.html#ref}"
            ]
          ],
          "start": 35,
          "length": 3,
          "target": "ref",
          "line": 1,
          "character": 20
        },
        {
          "type": "hover",
          "text": "const count: Ref<number, number>",
          "start": 77,
          "length": 5,
          "target": "count",
          "line": 4,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) ref<number>(value: number): Ref<number, number> (+1 overload)\nimport ref",
          "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
          "tags": [
            [
              "param",
              "value - The object to wrap in the ref."
            ],
            [
              "see",
              "{@link https://vuejs.org/api/reactivity-core.html#ref}"
            ]
          ],
          "start": 85,
          "length": 3,
          "target": "ref",
          "line": 4,
          "character": 14
        },
        {
          "type": "query",
          "text": "(alias) ref<number>(value: number): Ref<number, number> (+1 overload)\nimport ref",
          "docs": "Takes an inner value and returns a reactive and mutable ref object, which\nhas a single property `.value` that points to the inner value.",
          "tags": [
            [
              "param",
              "value - The object to wrap in the ref."
            ],
            [
              "see",
              "{@link https://vuejs.org/api/reactivity-core.html#ref}"
            ]
          ],
          "start": 85,
          "length": 3,
          "target": "ref",
          "line": 4,
          "character": 14
        },
        {
          "type": "hover",
          "text": "function increment(): void",
          "start": 153,
          "length": 9,
          "target": "increment",
          "line": 7,
          "character": 9
        },
        {
          "type": "hover",
          "text": "const count: Ref<number, number>",
          "start": 169,
          "length": 5,
          "target": "count",
          "line": 8,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) Ref<number, number>.value: number",
          "start": 175,
          "length": 5,
          "target": "value",
          "line": 8,
          "character": 8
        },
        {
          "type": "hover",
          "text": "(alias) onMounted(hook: any, target?: ComponentInternalInstance | null): void\nimport onMounted",
          "start": 205,
          "length": 9,
          "target": "onMounted",
          "line": 12,
          "character": 0
        },
        {
          "type": "hover",
          "text": "namespace console\nvar console: Console",
          "docs": "The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```",
          "tags": [
            [
              "see",
              "[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"
            ]
          ],
          "start": 225,
          "length": 7,
          "target": "console",
          "line": 13,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)",
          "docs": "Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.",
          "tags": [
            [
              "since",
              "v0.1.100"
            ]
          ],
          "start": 233,
          "length": 3,
          "target": "log",
          "line": 13,
          "character": 10
        },
        {
          "type": "hover",
          "text": "const count: Ref<number, number>",
          "start": 261,
          "length": 5,
          "target": "count",
          "line": 13,
          "character": 38
        },
        {
          "type": "hover",
          "text": "(property) Ref<number, number>.value: number",
          "start": 267,
          "length": 5,
          "target": "value",
          "line": 13,
          "character": 44
        },
        {
          "type": "hover",
          "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
          "start": 305,
          "length": 6,
          "target": "button",
          "line": 18,
          "character": 3
        },
        {
          "type": "hover",
          "text": "(property) onClick?: ((payload: MouseEvent) => void) | undefined",
          "start": 313,
          "length": 5,
          "target": "click",
          "line": 18,
          "character": 11
        },
        {
          "type": "hover",
          "text": "function increment(): void",
          "start": 320,
          "length": 9,
          "target": "increment",
          "line": 18,
          "character": 18
        },
        {
          "type": "hover",
          "text": "const count: Ref<number, number>",
          "start": 349,
          "length": 5,
          "target": "count",
          "line": 19,
          "character": 17
        },
        {
          "type": "hover",
          "text": "(property) button: ButtonHTMLAttributes & ReservedProps",
          "start": 362,
          "length": 6,
          "target": "button",
          "line": 20,
          "character": 4
        }
      ],
      "code": "<script setup>\nimport { onMounted, ref } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">\n    Count is: {{ count }}\n  </button>\n</template>",
      "meta": {
        "extension": "vue"
      }
    }
  }
}