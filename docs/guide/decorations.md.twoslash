{
  "version": 1,
  "fileHash": "e632b9668f9e79ed29c405bce79a7534fef900ea50eaf70146846ae7913fe239",
  "cache": {
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:6f76e460aa5d38a19c452f96b3bd978b30708d26e4bd561b16345219756f91c6": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) const codeToHtml: (code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>) => Promise<string>\nimport codeToHtml",
          "start": 9,
          "length": 10,
          "target": "codeToHtml",
          "line": 0,
          "character": 9
        },
        {
          "type": "hover",
          "text": "const code: string",
          "start": 42,
          "length": 4,
          "target": "code",
          "line": 2,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(method) String.trim(): string",
          "docs": "Removes the leading and trailing white space and line terminator characters from a string.",
          "start": 81,
          "length": 4,
          "target": "trim",
          "line": 5,
          "character": 2
        },
        {
          "type": "hover",
          "text": "const html: string",
          "start": 95,
          "length": 4,
          "target": "html",
          "line": 7,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) codeToHtml(code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>): Promise<string>\nimport codeToHtml",
          "start": 108,
          "length": 10,
          "target": "codeToHtml",
          "line": 7,
          "character": 19
        },
        {
          "type": "hover",
          "text": "const code: string",
          "start": 119,
          "length": 4,
          "target": "code",
          "line": 7,
          "character": 30
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsSingleTheme<BundledTheme>.theme: ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>",
          "start": 129,
          "length": 5,
          "target": "theme",
          "line": 8,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) lang: \"ts\"",
          "start": 155,
          "length": 4,
          "target": "lang",
          "line": 9,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) DecorationOptions.decorations?: DecorationItem[] | undefined",
          "docs": "Custom decorations to wrap highlighted tokens with.",
          "start": 169,
          "length": 11,
          "target": "decorations",
          "line": 10,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.start: OffsetOrPosition",
          "docs": "Start offset or position of the decoration.",
          "start": 254,
          "length": 5,
          "target": "start",
          "line": 13,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) Position.line: number",
          "start": 263,
          "length": 4,
          "target": "line",
          "line": 13,
          "character": 15
        },
        {
          "type": "hover",
          "text": "(property) Position.character: number",
          "start": 272,
          "length": 9,
          "target": "character",
          "line": 13,
          "character": 24
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.end: OffsetOrPosition",
          "docs": "End offset or position of the decoration.",
          "start": 294,
          "length": 3,
          "target": "end",
          "line": 14,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) Position.line: number",
          "start": 301,
          "length": 4,
          "target": "line",
          "line": 14,
          "character": 13
        },
        {
          "type": "hover",
          "text": "(property) Position.character: number",
          "start": 310,
          "length": 9,
          "target": "character",
          "line": 14,
          "character": 22
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.properties?: Properties | undefined",
          "docs": "Properties of the element to create.",
          "start": 333,
          "length": 10,
          "target": "properties",
          "line": 15,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) class: string",
          "start": 347,
          "length": 5,
          "target": "class",
          "line": 15,
          "character": 20
        }
      ],
      "code": "import { codeToHtml } from 'shiki'\n\nconst code = `\nconst x = 10\nconsole.log(x)\n`.trim()\n\nconst html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  decorations: [ // [!code hl:8]\n    {\n      // line and character are 0-indexed\n      start: { line: 1, character: 0 },\n      end: { line: 1, character: 11 },\n      properties: { class: 'highlighted-word' }\n    }\n  ]\n})",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:953094cb2bfdcd11f275a3f514be7c1a57f7c4409ec59e4133a71c95df3574f1": {
      "nodes": [
        {
          "type": "hover",
          "text": "const html: string",
          "start": 6,
          "length": 4,
          "target": "html",
          "line": 0,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) codeToHtml(code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>): Promise<string>\nimport codeToHtml",
          "start": 19,
          "length": 10,
          "target": "codeToHtml",
          "line": 0,
          "character": 19
        },
        {
          "type": "hover",
          "text": "const code: string",
          "start": 30,
          "length": 4,
          "target": "code",
          "line": 0,
          "character": 30
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsSingleTheme<BundledTheme>.theme: ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>",
          "start": 40,
          "length": 5,
          "target": "theme",
          "line": 1,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) lang: \"ts\"",
          "start": 66,
          "length": 4,
          "target": "lang",
          "line": 2,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) DecorationOptions.decorations?: DecorationItem[] | undefined",
          "docs": "Custom decorations to wrap highlighted tokens with.",
          "start": 80,
          "length": 11,
          "target": "decorations",
          "line": 3,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.start: OffsetOrPosition",
          "docs": "Start offset or position of the decoration.",
          "start": 123,
          "length": 5,
          "target": "start",
          "line": 5,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.end: OffsetOrPosition",
          "docs": "End offset or position of the decoration.",
          "start": 140,
          "length": 3,
          "target": "end",
          "line": 6,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) DecorationItem.properties?: Properties | undefined",
          "docs": "Properties of the element to create.",
          "start": 155,
          "length": 10,
          "target": "properties",
          "line": 7,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(property) class: string",
          "start": 169,
          "length": 5,
          "target": "class",
          "line": 7,
          "character": 20
        }
      ],
      "code": "const html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  decorations: [ // [!code hl:7]\n    {\n      start: 21,\n      end: 24,\n      properties: { class: 'highlighted-word' }\n    }\n  ]\n})",
      "meta": {
        "extension": "ts"
      }
    },
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:5070296431c0c2e6ec80bad61540213edabca79c8b850b8836725ed832449834": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) const codeToHtml: (code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>) => Promise<string>\nimport codeToHtml",
          "start": 9,
          "length": 10,
          "target": "codeToHtml",
          "line": 0,
          "character": 9
        },
        {
          "type": "hover",
          "text": "(alias) interface ShikiTransformer\nimport ShikiTransformer",
          "start": 21,
          "length": 16,
          "target": "ShikiTransformer",
          "line": 0,
          "character": 21
        },
        {
          "type": "hover",
          "text": "const myTransformer: ShikiTransformer",
          "start": 60,
          "length": 13,
          "target": "myTransformer",
          "line": 2,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) interface ShikiTransformer\nimport ShikiTransformer",
          "start": 75,
          "length": 16,
          "target": "ShikiTransformer",
          "line": 2,
          "character": 21
        },
        {
          "type": "hover",
          "text": "(property) ShikiTransformer.name?: string | undefined",
          "docs": "Name of the transformer",
          "start": 98,
          "length": 4,
          "target": "name",
          "line": 3,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) ShikiTransformer.preprocess?: ((this: ShikiTransformerContextCommon, code: string, options: CodeToHastOptions) => string | void) | undefined",
          "docs": "Transform the raw input code before passing to the highlighter.",
          "start": 124,
          "length": 10,
          "target": "preprocess",
          "line": 4,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(parameter) code: string",
          "start": 135,
          "length": 4,
          "target": "code",
          "line": 4,
          "character": 13
        },
        {
          "type": "hover",
          "text": "(parameter) options: CodeToHastOptions<string, string>",
          "start": 141,
          "length": 7,
          "target": "options",
          "line": 4,
          "character": 19
        },
        {
          "type": "hover",
          "text": "const decorations: DecorationItem[]",
          "start": 202,
          "length": 11,
          "target": "decorations",
          "line": 6,
          "character": 10
        },
        {
          "type": "hover",
          "text": "function doSomethingWithCode(code: string): DecorationItem[]",
          "start": 216,
          "length": 19,
          "target": "doSomethingWithCode",
          "line": 6,
          "character": 24
        },
        {
          "type": "hover",
          "text": "(parameter) code: string",
          "start": 236,
          "length": 4,
          "target": "code",
          "line": 6,
          "character": 44
        },
        {
          "type": "hover",
          "text": "(parameter) options: CodeToHastOptions<string, string>",
          "start": 293,
          "length": 7,
          "target": "options",
          "line": 9,
          "character": 4
        },
        {
          "type": "hover",
          "text": "(property) DecorationOptions.decorations?: DecorationItem[] | undefined",
          "docs": "Custom decorations to wrap highlighted tokens with.",
          "start": 301,
          "length": 11,
          "target": "decorations",
          "line": 9,
          "character": 12
        },
        {
          "type": "hover",
          "text": "(parameter) options: CodeToHastOptions<string, string>",
          "start": 354,
          "length": 7,
          "target": "options",
          "line": 11,
          "character": 4
        },
        {
          "type": "hover",
          "text": "(property) DecorationOptions.decorations?: DecorationItem[]",
          "docs": "Custom decorations to wrap highlighted tokens with.",
          "start": 362,
          "length": 11,
          "target": "decorations",
          "line": 11,
          "character": 12
        },
        {
          "type": "hover",
          "text": "(method) Array<DecorationItem>.push(...items: DecorationItem[]): number",
          "docs": "Appends new elements to the end of an array, and returns the new length of the array.",
          "tags": [
            [
              "param",
              "items New elements to add to the array."
            ]
          ],
          "start": 374,
          "length": 4,
          "target": "push",
          "line": 11,
          "character": 24
        },
        {
          "type": "hover",
          "text": "const decorations: DecorationItem[]",
          "start": 382,
          "length": 11,
          "target": "decorations",
          "line": 11,
          "character": 32
        },
        {
          "type": "hover",
          "text": "const html: string",
          "start": 408,
          "length": 4,
          "target": "html",
          "line": 15,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) codeToHtml(code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>): Promise<string>\nimport codeToHtml",
          "start": 421,
          "length": 10,
          "target": "codeToHtml",
          "line": 15,
          "character": 19
        },
        {
          "type": "hover",
          "text": "const code: string",
          "start": 432,
          "length": 4,
          "target": "code",
          "line": 15,
          "character": 30
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsSingleTheme<BundledTheme>.theme: ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>",
          "start": 442,
          "length": 5,
          "target": "theme",
          "line": 16,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) lang: \"ts\"",
          "start": 468,
          "length": 4,
          "target": "lang",
          "line": 17,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) TransformerOptions.transformers?: ShikiTransformer[] | undefined",
          "docs": "Transformers for the Shiki pipeline.",
          "start": 482,
          "length": 12,
          "target": "transformers",
          "line": 18,
          "character": 2
        },
        {
          "type": "hover",
          "text": "const myTransformer: ShikiTransformer",
          "start": 502,
          "length": 13,
          "target": "myTransformer",
          "line": 19,
          "character": 4
        }
      ],
      "code": "import { codeToHtml, ShikiTransformer } from 'shiki'\n\nconst myTransformer: ShikiTransformer = {\n  name: 'my-transformer',\n  preprocess(code, options) {\n    // Generate the decorations somehow\n    const decorations = doSomethingWithCode(code)\n\n    // Make sure the decorations array exists\n    options.decorations ||= []\n    // Append the decorations\n    options.decorations.push(...decorations)\n  }\n}\n\nconst html = await codeToHtml(code, {\n  theme: 'vitesse-light',\n  lang: 'ts',\n  transformers: [\n    myTransformer\n  ]\n})",
      "meta": {
        "extension": "ts"
      }
    }
  }
}