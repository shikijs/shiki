{
  "version": 1,
  "fileHash": "8bfad13d9291059c327317559abcaf73f5f67d67c8c8088efc64190450f02030",
  "cache": {
    "teojfmu_VVDND9IjD9xcgqoGUXo2btP4q2ZCFuTG5Ro:ts:316401fa1698680905ad6fa14c6a67f06df74efbc0cd4113753eeb005fdabeed": {
      "nodes": [
        {
          "type": "hover",
          "text": "(alias) const codeToHtml: (code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>) => Promise<string>\nimport codeToHtml",
          "start": 9,
          "length": 10,
          "target": "codeToHtml",
          "line": 0,
          "character": 9
        },
        {
          "type": "hover",
          "text": "const code: \"const a = 1\"",
          "start": 42,
          "length": 4,
          "target": "code",
          "line": 2,
          "character": 6
        },
        {
          "type": "hover",
          "text": "const html: string",
          "start": 83,
          "length": 4,
          "target": "html",
          "line": 3,
          "character": 6
        },
        {
          "type": "hover",
          "text": "(alias) codeToHtml(code: string, options: CodeToHastOptions<BundledLanguage, BundledTheme>): Promise<string>\nimport codeToHtml",
          "start": 96,
          "length": 10,
          "target": "codeToHtml",
          "line": 3,
          "character": 19
        },
        {
          "type": "hover",
          "text": "const code: \"const a = 1\"",
          "start": 107,
          "length": 4,
          "target": "code",
          "line": 3,
          "character": 30
        },
        {
          "type": "hover",
          "text": "(property) lang: \"javascript\"",
          "start": 117,
          "length": 4,
          "target": "lang",
          "line": 4,
          "character": 2
        },
        {
          "type": "hover",
          "text": "(property) CodeOptionsSingleTheme<BundledTheme>.theme: ThemeRegistrationAny | StringLiteralUnion<BundledTheme, string>",
          "start": 139,
          "length": 5,
          "target": "theme",
          "line": 5,
          "character": 2
        },
        {
          "type": "hover",
          "text": "namespace console\nvar console: Console",
          "docs": "The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```",
          "tags": [
            [
              "see",
              "[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"
            ]
          ],
          "start": 165,
          "length": 7,
          "target": "console",
          "line": 8,
          "character": 0
        },
        {
          "type": "hover",
          "text": "(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)",
          "docs": "Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.",
          "tags": [
            [
              "since",
              "v0.1.100"
            ]
          ],
          "start": 173,
          "length": 3,
          "target": "log",
          "line": 8,
          "character": 8
        },
        {
          "type": "hover",
          "text": "const html: string",
          "start": 177,
          "length": 4,
          "target": "html",
          "line": 8,
          "character": 12
        }
      ],
      "code": "import { codeToHtml } from 'shiki'\n\nconst code = 'const a = 1' // input code\nconst html = await codeToHtml(code, {\n  lang: 'javascript',\n  theme: 'vitesse-dark'\n})\n\nconsole.log(html) // highlighted html string",
      "meta": {
        "extension": "ts"
      }
    }
  }
}