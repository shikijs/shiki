// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`precompile 1`] = `
"export default {
  displayName: "YAML",
  fileTypes: [
    "yaml",
    "yml",
    "rviz",
    "reek",
    "clang-format",
    "yaml-tmlanguage",
    "syntax",
    "sublime-syntax",
  ],
  firstLineMatch: /^%YAML( ?1[^\\n]\\p{Nd}+)?/dgv,
  name: "yaml",
  patterns: [
    { include: "#comment" },
    { include: "#property" },
    { include: "#directive" },
    { match: /^---/dgv, name: "entity.other.document.begin.yaml" },
    { match: /^\\.{3}/dgv, name: "entity.other.document.end.yaml" },
    { include: "#node" },
  ],
  repository: {
    "block-collection": {
      patterns: [{ include: "#block-sequence" }, { include: "#block-mapping" }],
    },
    "block-mapping": { patterns: [{ include: "#block-pair" }] },
    "block-node": {
      patterns: [
        { include: "#prototype" },
        { include: "#block-scalar" },
        { include: "#block-collection" },
        { include: "#flow-scalar-plain-out" },
        { include: "#flow-node" },
      ],
    },
    "block-pair": {
      patterns: [
        {
          begin: /\\?/dgv,
          beginCaptures: {
            "1": { name: "punctuation.definition.key-value.begin.yaml" },
          },
          end: /(?=\\?)|^ *(:)|(:)/dgv,
          endCaptures: {
            "1": { name: "punctuation.separator.key-value.mapping.yaml" },
            "2": { name: "invalid.illegal.expected-newline.yaml" },
          },
          name: "meta.block-mapping.yaml",
          patterns: [{ include: "#block-node" }],
        },
        {
          begin:
            /(?=(?:[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-]\\P{space})([^\\p{space}\\:]|:\\P{space}|\\p{space}+(?![\\#\\p{space}]))*\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
          end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
          patterns: [
            { include: "#flow-scalar-plain-out-implicit-type" },
            {
              begin:
                /[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-]\\P{space}/dgv,
              beginCaptures: { "0": { name: "entity.name.tag.yaml" } },
              contentName: "entity.name.tag.yaml",
              end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
              name: "string.unquoted.plain.out.yaml",
            },
          ],
        },
        {
          match: /:(?=\\p{space}|(?=\\n?$))/dgv,
          name: "punctuation.separator.key-value.mapping.yaml",
        },
      ],
    },
    "block-scalar": {
      begin: /(?:(\\|)|(>))([1-9])?([\\-\\+])?([^\\n]*\\n?)/dgv,
      beginCaptures: {
        "1": { name: "keyword.control.flow.block-scalar.literal.yaml" },
        "2": { name: "keyword.control.flow.block-scalar.folded.yaml" },
        "3": { name: "constant.numeric.indentation-indicator.yaml" },
        "4": { name: "storage.modifier.chomping-indicator.yaml" },
        "5": {
          patterns: [
            { include: "#comment" },
            {
              match: /[^\\n]+/dgv,
              name: "invalid.illegal.expected-comment-or-newline.yaml",
            },
          ],
        },
      },
      end: /*@__PURE__*/ new EmulatedRegExp("^(?=\\\\P{space})|(?!^)", "dgv", {
        strategy: "clip_search",
      }),
      patterns: [
        {
          begin: /^([ ]+)(?! )/dgv,
          end: /^(?!\\1|\\p{space}*(?=\\n?$))()/dgv,
          name: "string.unquoted.block.yaml",
        },
      ],
    },
    "block-sequence": {
      match: /(-)(?!\\P{space})/dgv,
      name: "punctuation.definition.block.sequence.item.yaml",
    },
    comment: {
      begin:
        /(?:(^[ \\t]*)|[ \\t]+)(?=#[[\\P{space}&&\\P{cntrl}&&\\P{Cn}&&\\P{Cs}]\\p{Zs}]*(?=\\n?$))/dgv,
      beginCaptures: {
        "1": { name: "punctuation.whitespace.comment.leading.yaml" },
      },
      end: /*@__PURE__*/ new EmulatedRegExp("(?!^)", "dgv", {
        strategy: "clip_search",
      }),
      patterns: [
        {
          begin: /#/dgv,
          beginCaptures: {
            "0": { name: "punctuation.definition.comment.yaml" },
          },
          end: /\\n/dgv,
          name: "comment.line.number-sign.yaml",
        },
      ],
    },
    directive: {
      begin: /^%/dgv,
      beginCaptures: {
        "0": { name: "punctuation.definition.directive.begin.yaml" },
      },
      end: /(?=(?=\\n?$)|[ \\t]+((?=\\n?$)|#))/dgv,
      name: "meta.directive.yaml",
      patterns: [
        {
          captures: {
            "1": { name: "keyword.other.directive.yaml.yaml" },
            "2": { name: "constant.numeric.yaml-version.yaml" },
          },
          match: /(YAML)[ \\t]+(\\p{Nd}+\\.\\p{Nd}+)/dgvy,
        },
        {
          captures: {
            "1": { name: "keyword.other.directive.tag.yaml" },
            "2": { name: "storage.type.tag-handle.yaml" },
            "3": { name: "support.type.tag-prefix.yaml" },
          },
          match:
            /(TAG)(?:[ \\t]+(!(?:[0-9A-Za-z\\-]*!)?)(?:[ \\t]+(!(?:%[0-9A-Fa-f]{2}|[0-9A-Za-z\\-\\#\\;\\/\\?\\:\\@\\&\\=\\+\\$\\,_\\.\\!\\~\\*'\\(\\)\\[\\]])*|(?![\\,\\!\\[\\]\\{\\}])(?:%[0-9A-Fa-f]{2}|[0-9A-Za-z\\-\\#\\;\\/\\?\\:\\@\\&\\=\\+\\$\\,_\\.\\!\\~\\*'\\(\\)\\[\\]])+))?)?/dgvy,
        },
        {
          captures: {
            "1": { name: "support.other.directive.reserved.yaml" },
            "2": { name: "string.unquoted.directive-name.yaml" },
            "3": { name: "string.unquoted.directive-parameter.yaml" },
          },
          match:
            /([\\p{L}\\p{M}\\p{N}\\p{Pc}]+)(?:[ \\t]+([\\p{L}\\p{M}\\p{N}\\p{Pc}]+)(?:[ \\t]+([\\p{L}\\p{M}\\p{N}\\p{Pc}]+))?)?/dgvy,
        },
        { match: /\\P{space}+/dgv, name: "invalid.illegal.unrecognized.yaml" },
      ],
    },
    "flow-alias": {
      captures: {
        "1": { name: "keyword.control.flow.alias.yaml" },
        "2": { name: "punctuation.definition.alias.yaml" },
        "3": { name: "variable.other.alias.yaml" },
        "4": { name: "invalid.illegal.character.anchor.yaml" },
      },
      match:
        /((\\*))([^\\p{space}\\[\\]\\/\\{\\/\\}\\,]+)([^\\p{space}\\]\\}\\,]\\P{space}*)?/dgv,
    },
    "flow-collection": {
      patterns: [{ include: "#flow-sequence" }, { include: "#flow-mapping" }],
    },
    "flow-mapping": {
      begin: /\\{/dgv,
      beginCaptures: {
        "0": { name: "punctuation.definition.mapping.begin.yaml" },
      },
      end: /\\}/dgv,
      endCaptures: { "0": { name: "punctuation.definition.mapping.end.yaml" } },
      name: "meta.flow-mapping.yaml",
      patterns: [
        { include: "#prototype" },
        { match: /,/dgv, name: "punctuation.separator.mapping.yaml" },
        { include: "#flow-pair" },
      ],
    },
    "flow-node": {
      patterns: [
        { include: "#prototype" },
        { include: "#flow-alias" },
        { include: "#flow-collection" },
        { include: "#flow-scalar" },
      ],
    },
    "flow-pair": {
      patterns: [
        {
          begin: /\\?/dgv,
          beginCaptures: {
            "0": { name: "punctuation.definition.key-value.begin.yaml" },
          },
          end: /(?=[\\}\\,\\]])/dgv,
          name: "meta.flow-pair.explicit.yaml",
          patterns: [
            { include: "#prototype" },
            { include: "#flow-pair" },
            { include: "#flow-node" },
            {
              begin: /:(?=\\p{space}|(?=\\n?$)|[\\[\\]\\{\\}\\,])/dgv,
              beginCaptures: {
                "0": { name: "punctuation.separator.key-value.mapping.yaml" },
              },
              end: /(?=[\\}\\,\\]])/dgv,
              patterns: [{ include: "#flow-value" }],
            },
          ],
        },
        {
          begin:
            /(?=(?:[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-][^\\p{space}\\[\\]\\{\\}\\,])([^\\p{space}\\:\\[\\]\\{\\}\\,]|:[^\\p{space}\\[\\]\\{\\}\\,]|\\p{space}+(?![\\#\\p{space}]))*\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
          end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$))|\\p{space}*:[\\[\\]\\{\\}\\,]|\\p{space}*[\\[\\]\\{\\}\\,])/dgv,
          name: "meta.flow-pair.key.yaml",
          patterns: [
            { include: "#flow-scalar-plain-in-implicit-type" },
            {
              begin:
                /[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-][^\\p{space}\\[\\]\\{\\}\\,]/dgv,
              beginCaptures: { "0": { name: "entity.name.tag.yaml" } },
              contentName: "entity.name.tag.yaml",
              end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$))|\\p{space}*:[\\[\\]\\{\\}\\,]|\\p{space}*[\\[\\]\\{\\}\\,])/dgv,
              name: "string.unquoted.plain.in.yaml",
            },
          ],
        },
        { include: "#flow-node" },
        {
          begin: /:(?=\\p{space}|(?=\\n?$)|[\\[\\]\\{\\}\\,])/dgv,
          captures: {
            "0": { name: "punctuation.separator.key-value.mapping.yaml" },
          },
          end: /(?=[\\}\\,\\]])/dgv,
          name: "meta.flow-pair.yaml",
          patterns: [{ include: "#flow-value" }],
        },
      ],
    },
    "flow-scalar": {
      patterns: [
        { include: "#flow-scalar-double-quoted" },
        { include: "#flow-scalar-single-quoted" },
        { include: "#flow-scalar-plain-in" },
      ],
    },
    "flow-scalar-double-quoted": {
      begin: /"/dgv,
      beginCaptures: {
        "0": { name: "punctuation.definition.string.begin.yaml" },
      },
      end: /"/dgv,
      endCaptures: { "0": { name: "punctuation.definition.string.end.yaml" } },
      name: "string.quoted.double.yaml",
      patterns: [
        {
          match:
            /\\\\([0abtnvfre "\\/\\\\N_Lp]|x\\p{Nd}\\p{Nd}|u\\p{Nd}{4}|U\\p{Nd}{8})/dgv,
          name: "constant.character.escape.yaml",
        },
        {
          match: /\\\\\\n/dgv,
          name: "constant.character.escape.double-quoted.newline.yaml",
        },
      ],
    },
    "flow-scalar-plain-in": {
      patterns: [
        { include: "#flow-scalar-plain-in-implicit-type" },
        {
          begin:
            /[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-][^\\p{space}\\[\\]\\{\\}\\,]/dgv,
          end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$))|\\p{space}*:[\\[\\]\\{\\}\\,]|\\p{space}*[\\[\\]\\{\\}\\,])/dgv,
          name: "string.unquoted.plain.in.yaml",
        },
      ],
    },
    "flow-scalar-plain-in-implicit-type": {
      patterns: [
        {
          captures: {
            "1": { name: "constant.language.null.yaml" },
            "2": { name: "constant.language.boolean.yaml" },
            "3": { name: "constant.numeric.integer.yaml" },
            "4": { name: "constant.numeric.float.yaml" },
            "5": { name: "constant.other.timestamp.yaml" },
            "6": { name: "constant.language.value.yaml" },
            "7": { name: "constant.language.merge.yaml" },
          },
          match:
            /(?:(null|Null|NULL|~)|(y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)|((?:[\\-\\+]?0b[0-1_]+|[\\-\\+]?0[0-7_]+|[\\-\\+]?(?:0|[1-9][0-9_]*)|[\\-\\+]?0x[0-9a-fA-F_]+|[\\-\\+]?[1-9][0-9_]*(?::[0-5]?[0-9])+))|((?:[\\-\\+]?(?:[0-9][0-9_]*)?\\.[0-9\\.]*(?:[eE][\\-\\+][0-9]+)?|[\\-\\+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[\\-\\+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN)))|((?:\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}|\\p{Nd}{4}-\\p{Nd}{1,2}-\\p{Nd}{1,2}(?:[Tt]|[ \\t]+)\\p{Nd}{1,2}:\\p{Nd}{2}:\\p{Nd}{2}(?:\\.\\p{Nd}*)?(?:[ \\t]*Z|[\\-\\+]\\p{Nd}{1,2}(?::\\p{Nd}{1,2})?)?))|(=)|(<<))(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$))|\\p{space}*:[\\[\\]\\{\\}\\,]|\\p{space}*[\\[\\]\\{\\}\\,])/dgv,
        },
      ],
    },
    "flow-scalar-plain-out": {
      patterns: [
        { include: "#flow-scalar-plain-out-implicit-type" },
        {
          begin:
            /[^\\p{space}\\-\\?\\:\\,\\[\\]\\{\\}\\#\\&\\*\\!\\|\\>'"\\%\\@\\\`]|[\\?\\:\\-]\\P{space}/dgv,
          end: /(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
          name: "string.unquoted.plain.out.yaml",
        },
      ],
    },
    "flow-scalar-plain-out-implicit-type": {
      patterns: [
        {
          captures: {
            "1": { name: "constant.language.null.yaml" },
            "2": { name: "constant.language.boolean.yaml" },
            "3": { name: "constant.numeric.integer.yaml" },
            "4": { name: "constant.numeric.float.yaml" },
            "5": { name: "constant.other.timestamp.yaml" },
            "6": { name: "constant.language.value.yaml" },
            "7": { name: "constant.language.merge.yaml" },
          },
          match:
            /(?:(null|Null|NULL|~)|(y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)|((?:[\\-\\+]?0b[0-1_]+|[\\-\\+]?0[0-7_]+|[\\-\\+]?(?:0|[1-9][0-9_]*)|[\\-\\+]?0x[0-9a-fA-F_]+|[\\-\\+]?[1-9][0-9_]*(?::[0-5]?[0-9])+))|((?:[\\-\\+]?(?:[0-9][0-9_]*)?\\.[0-9\\.]*(?:[eE][\\-\\+][0-9]+)?|[\\-\\+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[\\-\\+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN)))|((?:\\p{Nd}{4}-\\p{Nd}{2}-\\p{Nd}{2}|\\p{Nd}{4}-\\p{Nd}{1,2}-\\p{Nd}{1,2}(?:[Tt]|[ \\t]+)\\p{Nd}{1,2}:\\p{Nd}{2}:\\p{Nd}{2}(?:\\.\\p{Nd}*)?(?:[ \\t]*Z|[\\-\\+]\\p{Nd}{1,2}(?::\\p{Nd}{1,2})?)?))|(=)|(<<))(?=\\p{space}*(?=\\n?$)|\\p{space}+#|\\p{space}*:(\\p{space}|(?=\\n?$)))/dgv,
        },
      ],
    },
    "flow-scalar-single-quoted": {
      begin: /'/dgv,
      beginCaptures: {
        "0": { name: "punctuation.definition.string.begin.yaml" },
      },
      end: /'(?!')/dgv,
      endCaptures: { "0": { name: "punctuation.definition.string.end.yaml" } },
      name: "string.quoted.single.yaml",
      patterns: [
        {
          match: /''/dgv,
          name: "constant.character.escape.single-quoted.yaml",
        },
      ],
    },
    "flow-sequence": {
      begin: /\\[/dgv,
      beginCaptures: {
        "0": { name: "punctuation.definition.sequence.begin.yaml" },
      },
      end: /\\]/dgv,
      endCaptures: {
        "0": { name: "punctuation.definition.sequence.end.yaml" },
      },
      name: "meta.flow-sequence.yaml",
      patterns: [
        { include: "#prototype" },
        { match: /,/dgv, name: "punctuation.separator.sequence.yaml" },
        { include: "#flow-pair" },
        { include: "#flow-node" },
      ],
    },
    "flow-value": {
      patterns: [
        {
          begin: /(?![\\}\\,\\]])/dgvy,
          end: /(?=[\\}\\,\\]])/dgv,
          name: "meta.flow-pair.value.yaml",
          patterns: [{ include: "#flow-node" }],
        },
      ],
    },
    node: { patterns: [{ include: "#block-node" }] },
    property: {
      begin: /(?=!|&)/dgv,
      end: /*@__PURE__*/ new EmulatedRegExp("(?!^)", "dgv", {
        strategy: "clip_search",
      }),
      name: "meta.property.yaml",
      patterns: [
        {
          captures: {
            "1": { name: "keyword.control.property.anchor.yaml" },
            "2": { name: "punctuation.definition.anchor.yaml" },
            "3": { name: "entity.name.type.anchor.yaml" },
            "4": { name: "invalid.illegal.character.anchor.yaml" },
          },
          match: /((&))([^\\p{space}\\[\\]\\/\\{\\/\\}\\,]+)(\\P{space}+)?/dgvy,
        },
        {
          match:
            /(?:!<(?:%[0-9A-Fa-f]{2}|[0-9A-Za-z\\-\\#\\;\\/\\?\\:\\@\\&\\=\\+\\$\\,_\\.\\!\\~\\*'\\(\\)\\[\\]])+>|!(?:[0-9A-Za-z\\-]*!)?(?:%[0-9A-Fa-f]{2}|[0-9A-Za-z\\-\\#\\;\\/\\?\\:\\@\\&\\=\\+\\$_\\.\\~\\*'\\(\\)])+|!)(?= |\\t|(?=\\n?$))/dgvy,
          name: "storage.type.tag-handle.yaml",
        },
        { match: /\\P{space}+/dgv, name: "invalid.illegal.tag-handle.yaml" },
      ],
    },
    prototype: {
      patterns: [{ include: "#comment" }, { include: "#property" }],
    },
  },
  scopeName: "source.yaml",
  aliases: ["yml"],
};
"
`;
